buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.6.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}


apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'application'

group = "org.grobid"

description = """The goal of this GROBID module is to recognize in textual documents any expressions of 
measurements (e.g. pressure, temperature, etc.), to parse and normalization them, and finally to convert 
these measurements into SI units. We focus our work on technical and scientific articles (text, XML and PDF input) 
and patents (text and XML input)."""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.run.workingDir = rootProject.rootDir

ext {
    // treating them separately, these jars will be flattened into grobid-core.jar on installing,
    // to avoid missing dependencies from the projects that include grobid-core (see 'jar' taskin grobid-core)
    localLibs = []
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/rookies/maven" }
}

dependencies {
    //Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.easymock:easymock:3.4'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.4'
    testCompile 'org.powermock:powermock-module-junit4:1.7.1'
    testCompile 'org.powermock:powermock-api-easymock:1.7.1'

    //GROBID
    compile 'org.grobid:grobid-core:0.5.4'
    compile 'org.grobid:grobid-trainer:0.5.4'
    compile('org.grobid:grobid-service:0.5.4') {
        transitive = false
    }

    //Apache commons
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-pool:commons-pool:1.6'

    //Json
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'

    // measurements
    compile group: 'si.uom', name: 'si-units-java8', version: '0.9'
    compile group: 'si.uom', name: 'si-quantity', version: '0.9'
    compile group: 'tec.uom', name: 'uom-se', version: '1.0.9'
//    compile 'tech.units:indriya:2.0-EDR'
//    compile group: 'si.uom', name: 'si-units-java8', version: '1.0-SNAPSHOT'
//    compile group: 'si.uom', name: 'si-quantity', version: '1.0-SNAPSHOT'
//    compile group: 'tec.uom', name: 'uom-se', version: '1.0.10-SNAPSHOT'
//    compile group: 'tech.uom', name: 'seshat', version: '1.0-SNAPSHOT'

    compile group: 'systems.uom', name: 'systems-ucum-java8', version: '0.9'
    compile group: 'systems.uom', name: 'systems-unicode-java8', version: '0.9'
    compile group: 'systems.uom', name: 'systems-quantity', version: '0.9'
    compile group: 'systems.uom', name: 'systems-common', version: '0.9'

//    compile group: 'systems.uom', name: 'systems-unicode', version: '0.9'
//    compile group: 'systems.uom', name: 'systems-ucum', version: '0.9'
//    compile group: 'systems.uom', name: 'systems-ucum-java8', version: '1.0-SNAPSHOT'
//    compile group: 'systems.uom', name: 'systems-unicode-java8', version: '1.0-SNAPSHOT'
//    compile group: 'systems.uom', name: 'systems-quantity', version: '1.0-SNAPSHOT'
//    compile group: 'systems.uom', name: 'systems-common', version: '1.0-SNAPSHOT'
//    compile group: 'systems.uom', name: 'systems-unicode', version: '1.0-SNAPSHOT'
//    compile group: 'systems.uom', name: 'systems-ucum', version: '1.0-SNAPSHOT'

    //Dropwizard
    compile "io.dropwizard:dropwizard-core:1.3.9"
    compile "io.dropwizard:dropwizard-assets:1.3.9"
    compile "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.0"
    compile "io.dropwizard:dropwizard-testing:1.3.9"
    compile "io.dropwizard:dropwizard-forms:1.3.9"
    compile "io.dropwizard:dropwizard-client:1.3.9"
    compile "io.dropwizard:dropwizard-auth:1.3.9"
    compile "io.dropwizard.metrics:metrics-core:4.0.0"
    compile "io.dropwizard.metrics:metrics-servlets:4.0.0"
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    //Misc
    compile group: 'com.googlecode.clearnlp', name: 'clearnlp', version: '1.3.1'
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'directory-naming', name: 'naming-java', version: '0.8'
    compile group: 'org.jvnet', name: 'mimepull', version: '1.6'
    compile group: 'net.arnx', name: 'jsonic', version: '1.3.10'

    // XML
    implementation 'org.codehaus.woodstox:stax2-api:3.1.4'
    implementation 'com.fasterxml.woodstox:woodstox-core:5.1.0'
}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-jdk14"
    compile.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    compile.exclude group: 'log4j', module: "log4j"
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

test {
    exclude '**/**IntegrationTest**'
}

//integration (type: Test){
//    include '**'
//}

// Training configuration

def trainerTasks = [
        //Training models
        "train_units"            : "org.grobid.trainer.UnitTrainer",
        "train_quantities"       : "org.grobid.trainer.QuantityTrainer",
        "train_values"           : "org.grobid.trainer.ValueTrainer",
        "train_quantifiedObjects": "org.grobid.trainer.QuantifiedObjectTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

/*** Packaging and distribution ***/

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task mainJar(type: ShadowJar, group: 'onejar') {
    zip64 true
    from sourceSets.main.output
    mergeServiceFiles()
    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    mainClassName = 'org.grobid.service.main.GrobidQuantitiesApplication'
    classifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

jar {
    dependsOn mainJar
    enabled false
}

artifacts {
//    archives shadowJar
    archives mainJar
}

distZip.classifier = 'application'
distTar.classifier = 'application'

task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "**/*.wapiti"
    into "${rootDir}/../grobid-home/models/"
}

wrapper {
    gradleVersion "4.10"
}



